openapi: 3.0.3
info:
    title: Swagger TheBookCabinet
    description: >-
        TheBookCabinet server based on OpenAPI 3.0 specifications.
    version: 1.0.0
externalDocs:
    description: Find out more about Swagger
    url: http://swagger.io
tags:
    - name: book
      description: Actions on books
    - name: user
      description: Actions on users
paths:
    /books:
        get:
            tags:
                - book
            summary: Returns all books
            description: Returns a list of all books
            operationId: getBooks
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Book"
                "204":
                    description: No content
                "500":
                    description: Internal Server Error
        post:
            tags:
                - book
            summary: Creates a new book
            description: Creates a new book
            operationId: createBook
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BookInput"
            responses:
                "201":
                    description: Book created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Book"
                "500":
                    description: Internal Server Error
    /books/{id}:
        get:
            tags:
                - book
            summary: Returns a book by ID
            description: Returns a single book
            operationId: getBook
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ID of the book to retrieve
                  schema:
                      type: string
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Book"
                "404":
                    description: Book not found
        patch:
            tags:
                - book
            summary: Updates a book by ID
            description: Updates a single book
            operationId: updateBook
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ID of the book to update
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BookInput"
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Book"
                "404":
                    description: Book not found
                "500":
                    description: Internal Server Error
        delete:
            tags:
                - book
            summary: Deletes a book by ID
            description: Deletes a single book
            operationId: deleteBook
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ID of the book to delete
                  schema:
                      type: string
            responses:
                "204":
                    description: Book deleted successfully
                "404":
                    description: Book not found
                "500":
                    description: Internal Server Error
    /books/isbn/{isbn}:
        get:
            tags:
                - book
            summary: Returns a book by ISBN
            description: Returns a single book by its ISBN number
            operationId: getBookByISBN
            parameters:
                - name: isbn
                  in: path
                  required: true
                  description: ISBN number of the book to retrieve
                  schema:
                      type: string
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Book"
                "404":
                    description: Book not found
                "500":
                    description: Internal Server Error
    /users:
        post:
            tags:
                - user
            summary: Creates a new user
            description: Creates a new user
            operationId: createUser
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserInput"
            responses:
                "201":
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                "500":
                    description: Internal Server Error
        delete:
            tags:
                - user
            summary: Deletes a user by ID
            description: Deletes a single user
            operationId: deleteUser
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ID of the user to delete
                  schema:
                      type: string
            responses:
                "204":
                    description: User deleted successfully
                "404":
                    description: User not found
                "500":
                    description: Internal Server Error
    /users/login:
        post:
            tags:
                - user
            summary: Logs in a user
            description: Authenticates a user and returns user details
            operationId: loginUser
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserLogin"
            responses:
                "200":
                    description: User logged in successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                "401":
                    description: Unauthorized - Invalid credentials
                "500":
                    description: Internal Server Error
components:
    schemas:
        Book:
            type: object
            properties:
                _id:
                    type: string
                    description: Unique identifier for the book
                    example: "64a7f0c2e4b0c8b1a1e4d2f3"
                title:
                    type: string
                    description: Title of the book
                    example: "Alice's Adventures in Wonderland"
                author:
                    type: string
                    description: Author of the book
                    example: "Lewis Carroll"
                genre:
                    type: array
                    items:
                        type: string
                    description: List of genres the book belongs to
                    example: ["Fantasy", "Adventure"]
                url_image:
                    type: string
                    description: URL of the book's cover image
                    example: "http://example.com/cover.jpg"
                isbn:
                    type: string
                    description: ISBN number of the book
                    example: "9783161484100"
                __v:
                    type: integer
                    description: Version number of the book document
                    example: 0
        BookInput:
            type: object
            properties:
                title:
                    type: string
                    description: Title of the book
                    example: "Alice's Adventures in Wonderland"
                author:
                    type: string
                    description: Author of the book
                    example: "Lewis Carroll"
                genre:
                    type: array
                    items:
                        type: string
                    description: List of genres the book belongs to
                    example: ["Fantasy", "Adventure"]
                url_image:
                    type: string
                    description: URL of the book's cover image
                    example: "http://example.com/cover.jpg"
                isbn:
                    type: string
                    description: ISBN number of the book
                    example: " 9783161484100"
        User:
            type: object
            properties:
                _id:
                    type: string
                    description: Unique identifier for the user
                    example: "64a7f0c2e4b0c8b1a1e4d2f3"
                email:
                    type: string
                    description: Email address of the user
                    example: "alice@example.com"
                username:
                    type: string
                    description: Username of the user
                    example: "alice123"
                password:
                    type: string
                    description: Hashed password of the user
                    example: "$2b$10$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW"
                __v:
                    type: integer
                    description: Version number of the user document
                    example: 0
        UserInput:
            type: object
            properties:
                email:
                    type: string
                    description: Email address of the user
                    example: "alice@example.com"
                username:
                    type: string
                    description: Username of the user
                    example: "alice123"
                password:
                    type: string
                    description: Password of the user
                    example: "securePassword123"
        UserLogin:
            type: object
            properties:
                email:
                    type: string
                    description: Email address of the user
                    example: "alice@example.com"
                password:
                    type: string
                    description: Password of the user
                    example: "securePassword123"
        Login:
            type: object
            properties:
                user:
                    $ref: "#/components/schemas/User"
                token:
                    type: string
                    description: JWT token for authenticated access
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    responses:
        UnauthorizedError:
            description: Access token is missing or invalid
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
